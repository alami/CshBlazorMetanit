@page "/Demo05statusValid"
@rendermode RenderMode.InteractiveServer
<EditForm EditContext="editContext" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>Name:<br /><InputText id="name" @bind-Value="person.Name" /> </p>
    <p>Age:<br /><InputNumber id="age" @bind-Value="person.Age" /></p>
    <button type="submit">Submit</button>
</EditForm>
<h3>@message</h3>
@code {
    string message = "";
    Person person = new();
    EditContext? editContext;
    ValidationMessageStore? messageStore;   // хранилище сообщений об ошибках

    protected override void OnInitialized()
    {
        editContext = new(person);
        messageStore = new(editContext);    // связываем хранилище сообщений с контекстом EditContext
        editContext.OnValidationStateChanged += HandleValidationRequested;
    }                                       //^--подписываемся на событие OnValidationStateChanged

    void HandleValidationRequested(object? sender, ValidationStateChangedEventArgs args)
    {
        messageStore?.Clear();  // удаляем ранее добавленные сообщения
                                // если имя - admin, добавляем сообщение обошибке
        if (person.Name == "admin")
            messageStore?.Add(() => person.Name!, "Invalid name");
    }
    public void Dispose()
    {                                      //как и в случае с любыми другими событиями
        if (editContext != null)           // отписаться от события OnValidationStateChanged,
            editContext.OnValidationStateChanged -= HandleValidationRequested;
    }
    void Submit()
    {
        if (editContext != null && editContext.Validate())
            message = $"Name: {person.Name}; Age: {person.Age}";
        else
            message = "Data Invalid";
    }

}
